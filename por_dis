import numpy as np
import matplotlib.pyplot as plt
import os

def calculate_porosity_per_slice(raw_file, sample_size):
  
   #calculates the porosity of each slice along the length of a sample from a raw file.
   #raw_file: Path to the raw file.
   #sample_size: Size of the 3D sample.

   
    with open(raw_file, 'rb') as f:
        data = np.fromfile(f, dtype=np.uint8)
        data = data.reshape(sample_size)

    # Initialize an empty list to store the porosities
    porosities = []

    # Calculate the porosity for each slice along the length (z-axis)
    for z in range(sample_size[2]):
        slice_data = data[:, :, z]

        # Count the number of pore voxels (value 0) and solid voxels (value 255)
        pore_voxels = np.count_nonzero(slice_data == 0)
        solid_voxels = np.count_nonzero(slice_data == 255)

        # Calculate porosity
        porosity = pore_voxels / (pore_voxels + solid_voxels)
        porosities.append(porosity)

    return porosities

# Define input parameters
sample_size = (350, 200, 200)
output_prefix = "sample"

# List of sample numbers that should be processed
high_value_samples = [1, 4, 6, 10, 11, 16, 17, 20, 21, 22, 23]

# Calculate the porosity for each sample in high_value_samples
for i in high_value_samples:
    raw_file = f"{output_prefix}_{i}.raw"
    if os.path.exists(raw_file):
        porosities = calculate_porosity_per_slice(raw_file, sample_size)

        # Convert slice number to length in micrometers
        length_in_micrometers = [z * 1.5 for z in range(len(porosities))]

        # Plot porosity distribution along the length for each sample
        plt.figure()
        plt.plot(length_in_micrometers, porosities)
        plt.xlabel('Length (micrometers)')
        plt.ylabel('Porosity')
        plt.title(f'Porosity Distribution along the Length for Sample {i}')
        plt.show()
