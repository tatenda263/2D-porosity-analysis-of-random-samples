import numpy as np
import matplotlib.pyplot as plt
import os

def calculate_porosity(raw_file, sample_size):

    #calculates the porosity of a sample from a raw file.     
    #raw_file: Path to the raw file.
    #sample_size: Size of the 3D sample.

    with open(raw_file, 'rb') as f:
        data = np.fromfile(f, dtype=np.uint8)
        data = data.reshape(sample_size)

    # Count the number of pore voxels (value 0) and solid voxels (value 255)
    pore_voxels = np.count_nonzero(data == 0)
    solid_voxels = np.count_nonzero(data == 255)

    # Calculate porosity
    porosity = pore_voxels / (pore_voxels + solid_voxels)

    return porosity

# Define input parameters
sample_size = (350, 200, 200)
output_prefix = "sample"

# List of sample numbers that should be processed
high_value_samples = [1, 4, 6, 10, 11, 16, 17, 20, 21, 22, 23]

# Initialize an empty list to store the porosities
porosities = []

# Calculate the porosity for each sample in high_value_samples
for i in high_value_samples:
    raw_file = f"{output_prefix}_{i}.raw"
    if os.path.exists(raw_file):
        porosity = calculate_porosity(raw_file, sample_size)
        porosities.append(porosity)

# Plot porosity versus sample number
plt.bar(high_value_samples, porosities)
plt.xlabel('Sample Number')
plt.ylabel('Porosity')
plt.title('Porosity versus Sample Number')
plt.show()
